{"version":3,"sources":["../bundle/node_modules/browser-pack/_prelude.js","../bundle/dist/lib/ec/forge.js","../bundle/dist/lib/index.js","../bundle/dist/lib/utils/ByteArray.js","../bundle/node_modules/base64-js/index.js","../bundle/node_modules/buffer/index.js","../bundle/node_modules/ieee754/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","__importDefault","mod","__esModule","default","Object","defineProperty","value","ByteArray_1","Forge","this","version","USER_ACTION_LAYER_TRANSFER","prototype","encodeLayerTransfer","dstTokenId","srcTokenId","layer1","layer2","layer3","layer4","layer5","requires","bytes","Buffer","alloc","writeUnsignedShort","writeBytes","from","toString","decodeLayerTransfer","binaryString","cleanBinary","removeZeroX","result","readUnsignedShort","method_id","workBA","readBytes","condition","message","string","replace","ByteArray","forge_1","window","ecutil","buffer","DEFAULT_SIZE","start_size","writePosition","readPosition","endian","isBuffer","get","enumerable","configurable","clear","reset","canWrite","scaleBuffer","oldBuffer","copy","readBoolean","readByte","readInt8","offset","RangeError","bytesAvailable","writeByte","readDouble","readDoubleBE","readDoubleLE","readFloat","readFloatBE","readFloatLE","readInt","readInt32BE","readInt32LE","readMultiByte","charSet","position","isEncoding","readShort","readInt16BE","readInt16LE","readUnsignedByte","readUInt8","readUnsignedInt","readUInt32BE","readUInt32LE","readUInt16BE","readUInt16LE","readUTF","readUTFBytes","toJSON","writeBoolean","writeInt8","writeDouble","writeDoubleBE","writeDoubleLE","writeFloat","writeFloatBE","writeFloatLE","writeInt","writeInt32BE","writeInt32LE","writeMultiByte","byteLength","write","writeShort","writeInt16BE","writeInt16LE","writeUnsignedByte","writeUInt8","writeUnsignedInt","writeUInt32BE","writeUInt32LE","writeUInt16BE","writeUInt16LE","writeUTF","writeUTFBytes","copyBytes","advanceReadPositionBy","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","push","encodeChunk","lookup","join","Uint8Array","Array","indexOf","start","end","num","output","base64","ieee754","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","buf","__proto__","arg","encodingOrOffset","TypeError","allocUnsafe","encoding","actual","slice","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","array","byteOffset","undefined","fromArrayBuffer","valueOf","b","obj","checked","numberIsNaN","type","isArray","data","fromObject","Symbol","toPrimitive","assertSize","size","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","error","species","writable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","max","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","toHex","checkOffset","ext","checkInt","checkIEEE754","littleEndian","noAssert","newBuf","subarray","readUIntLE","mul","readUIntBE","readIntLE","pow","readIntBE","writeUIntLE","writeUIntBE","writeIntLE","limit","sub","writeIntBE","targetStart","copyWithin","set","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","constructor","name","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","floor","log","LN2"],"mappings":"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","file":"ecutil.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n/*\n * source       https://github.com/ethercards/ec-util/\n * @name        EC\n * @package     ECUtil\n * @author      Micky Socaci <micky@ether.cards>\n * @license     MIT\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ByteArray_1 = __importDefault(require(\"../utils/ByteArray\"));\nvar Forge = /** @class */ (function () {\n    function Forge() {\n        this.version = 1;\n        this.USER_ACTION_LAYER_TRANSFER = 1;\n    }\n    /**\n     * Encode Layer transfer\n     * @param dstTokenId number     Destination token id\n     * @param srcTokenId number     Source token id\n     * @param layer1 string         Layer 1 value\n     * @param layer2 string         Layer 2 value\n     * @param layer3 string         Layer 3 value\n     * @param layer4 string         Layer 4 value\n     * @param layer5 string         Layer 5 value\n     * @returns string\n     */\n    Forge.prototype.encodeLayerTransfer = function (dstTokenId, srcTokenId, layer1, layer2, layer3, layer4, layer5) {\n        this.requires(dstTokenId > 10 && dstTokenId <= 10000, \"dstTokenId must be in range between 10 and 10000\");\n        this.requires(srcTokenId > 10 && srcTokenId <= 10000, \"srcTokenId must be in range between 10 and 10000\");\n        this.requires(dstTokenId != srcTokenId, \"dstTokenId must be different than srcTokenId\");\n        this.requires(layer1.length == 2, \"Layer1 length must be 2\");\n        this.requires(layer2.length == 2, \"Layer2 length must be 2\");\n        this.requires(layer3.length == 2, \"Layer3 length must be 2\");\n        this.requires(layer4.length == 2, \"Layer4 length must be 2\");\n        this.requires(layer5.length == 2, \"Layer5 length must be 2\");\n        var bytes = new ByteArray_1.default(Buffer.alloc(2 + 2));\n        // add version - 2 bytes - uint16\n        bytes.writeUnsignedShort(this.version);\n        // add method id - 2 bytes - uint16\n        bytes.writeUnsignedShort(this.USER_ACTION_LAYER_TRANSFER);\n        // dstTokenId - 2 bytes - uint16\n        bytes.writeUnsignedShort(dstTokenId);\n        // optional.. since we already know the source when received by the contract.. but hey.\n        // srcTokenId - 2 bytes - uint16\n        bytes.writeUnsignedShort(srcTokenId);\n        // add layers\n        bytes.writeBytes(Buffer.from(layer1));\n        bytes.writeBytes(Buffer.from(layer2));\n        bytes.writeBytes(Buffer.from(layer3));\n        bytes.writeBytes(Buffer.from(layer4));\n        bytes.writeBytes(Buffer.from(layer5));\n        // add 0x start and return\n        return \"0x\" + bytes.toString(\"hex\"); // + data;\n    };\n    /**\n     * Decode Layer transfer data\n     * @param binaryString string\n     * @returns string\n     */\n    Forge.prototype.decodeLayerTransfer = function (binaryString) {\n        // strip out 0x\n        var cleanBinary = this.removeZeroX(binaryString);\n        // convert the result to a byte array so we can process it\n        var bytes = new ByteArray_1.default(Buffer.from(cleanBinary, \"hex\"));\n        var result = {\n            version: bytes.readUnsignedShort(),\n            method_id: bytes.readUnsignedShort(),\n            dstTokenId: bytes.readUnsignedShort(),\n            srcTokenId: bytes.readUnsignedShort(),\n            layer1: \"\",\n            layer2: \"\",\n            layer3: \"\",\n            layer4: \"\",\n            layer5: \"\",\n        };\n        for (var i = 1; i <= 5; i++) {\n            // empty byte array\n            var workBA = new ByteArray_1.default(2);\n            // copy bytes into work area\n            bytes.readBytes(workBA, 0, 2);\n            // \n            result[\"layer\" + i] = workBA.toString(\"binary\");\n        }\n        return result;\n    };\n    Forge.prototype.requires = function (condition, message) {\n        if (!condition) {\n            throw (message);\n        }\n    };\n    /**\n     * Remove 0x from string then return it\n     * @param string\n     * @returns string\n     */\n    Forge.prototype.removeZeroX = function (string) {\n        return string.replace(\"0x\", \"\");\n    };\n    return Forge;\n}());\nexports.default = Forge;\n//# sourceMappingURL=forge.js.map","\"use strict\";\n/*\n * source       https://github.com/ethercards/ec-util/\n * @name        ECUtil\n * @package     ECUtil\n * @author      Micky Socaci <micky@ether.cards>\n * @license     MIT\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteArray = exports.Forge = void 0;\nvar forge_1 = __importDefault(require(\"./ec/forge\"));\nexports.Forge = forge_1.default;\nvar ByteArray_1 = __importDefault(require(\"./utils/ByteArray\"));\nexports.ByteArray = ByteArray_1.default;\nif (typeof window !== 'undefined') {\n    window.ecutil = window.ecutil || {};\n    window.ecutil.Forge = forge_1.default;\n    window.ecutil.ByteArray = ByteArray_1.default;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*\n * source       https://github.com/mickys/zoom-next/\n * @name        ByteArray\n * @package     ECUtil\n * @author      Micky Socaci <micky@ether.cards>\n * @license     MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ByteArray = /** @class */ (function () {\n    function ByteArray(buffer) {\n        this.DEFAULT_SIZE = 2048;\n        this.start_size = 0;\n        this.writePosition = 0;\n        this.readPosition = 0;\n        this.endian = true;\n        if (buffer instanceof ByteArray) {\n            this.buffer = buffer.buffer;\n        }\n        else if (Buffer.isBuffer(buffer)) {\n            this.buffer = buffer;\n        }\n        else {\n            if (typeof buffer === \"number\") {\n                this.start_size = buffer;\n            }\n            else {\n                this.start_size = this.DEFAULT_SIZE;\n            }\n            this.buffer = Buffer.alloc(this.start_size);\n        }\n    }\n    Object.defineProperty(ByteArray.prototype, \"bytesAvailable\", {\n        get: function () {\n            return this.buffer.length - this.readPosition;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ByteArray.prototype, \"length\", {\n        get: function () {\n            return this.buffer.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ByteArray.prototype.clear = function () {\n        this.buffer = Buffer.alloc(this.DEFAULT_SIZE);\n        this.reset();\n    };\n    ByteArray.prototype.reset = function () {\n        this.writePosition = 0;\n        this.readPosition = 0;\n    };\n    ByteArray.prototype.canWrite = function (length) {\n        return this.length - this.writePosition >= length;\n    };\n    ByteArray.prototype.scaleBuffer = function (length) {\n        var oldBuffer = this.buffer;\n        this.buffer = Buffer.alloc(this.length + length);\n        oldBuffer.copy(this.buffer);\n    };\n    ByteArray.prototype.readBoolean = function () {\n        return this.readByte() !== 0;\n    };\n    ByteArray.prototype.readByte = function () {\n        var value = this.buffer.readInt8(this.readPosition);\n        this.readPosition += 1;\n        return value;\n    };\n    ByteArray.prototype.readBytes = function (buffer, offset, length) {\n        if (offset === void 0) { offset = 0; }\n        if (length === void 0) { length = 0; }\n        if (offset < 0 || length < 0) {\n            throw new RangeError(\"Offset/Length can't be less than 0\");\n        }\n        if (length === 0) {\n            length = this.bytesAvailable;\n        }\n        if (length > this.bytesAvailable) {\n            throw new RangeError(\"Length can't be greater than the bytes available\");\n        }\n        var total = offset + length;\n        if (total !== offset + length) {\n            throw new RangeError(\"32-bit overflow\");\n        }\n        if (!buffer.canWrite(offset + length)) {\n            buffer.scaleBuffer(offset + length);\n        }\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                buffer.writeByte(this.readByte());\n            }\n        }\n    };\n    ByteArray.prototype.readDouble = function () {\n        var value = this.endian\n            ? this.buffer.readDoubleBE(this.readPosition)\n            : this.buffer.readDoubleLE(this.readPosition);\n        this.readPosition += 8;\n        return value;\n    };\n    ByteArray.prototype.readFloat = function () {\n        var value = this.endian\n            ? this.buffer.readFloatBE(this.readPosition)\n            : this.buffer.readFloatLE(this.readPosition);\n        this.readPosition += 4;\n        return value;\n    };\n    ByteArray.prototype.readInt = function () {\n        var value = this.endian\n            ? this.buffer.readInt32BE(this.readPosition)\n            : this.buffer.readInt32LE(this.readPosition);\n        this.readPosition += 4;\n        return value;\n    };\n    ByteArray.prototype.readMultiByte = function (length, charSet) {\n        if (charSet === void 0) { charSet = \"utf8\"; }\n        var position = this.readPosition;\n        this.readPosition += length;\n        if (Buffer.isEncoding(charSet)) {\n            return this.buffer.toString(charSet, position, position + length);\n        }\n        else {\n            throw new Error(\"Cannot read multi byte. Buffer encoding does not match\");\n        }\n    };\n    ByteArray.prototype.readShort = function () {\n        var value = this.endian\n            ? this.buffer.readInt16BE(this.readPosition)\n            : this.buffer.readInt16LE(this.readPosition);\n        this.readPosition += 2;\n        return value;\n    };\n    ByteArray.prototype.readUnsignedByte = function () {\n        var value = this.buffer.readUInt8(this.readPosition);\n        this.readPosition += 1;\n        return value;\n    };\n    ByteArray.prototype.readUnsignedInt = function () {\n        var value = this.endian\n            ? this.buffer.readUInt32BE(this.readPosition)\n            : this.buffer.readUInt32LE(this.readPosition);\n        this.readPosition += 4;\n        return value;\n    };\n    ByteArray.prototype.readUnsignedShort = function () {\n        var value = this.endian\n            ? this.buffer.readUInt16BE(this.readPosition)\n            : this.buffer.readUInt16LE(this.readPosition);\n        this.readPosition += 2;\n        return value;\n    };\n    ByteArray.prototype.readUTF = function () {\n        var length = this.readShort();\n        var position = this.readPosition;\n        this.readPosition += length;\n        return this.buffer.toString(\"utf8\", position, position + length);\n    };\n    ByteArray.prototype.readUTFBytes = function (length) {\n        return this.readMultiByte(length);\n    };\n    ByteArray.prototype.toJSON = function () {\n        return this.buffer.toJSON();\n    };\n    ByteArray.prototype.toString = function (charSet, offset, length) {\n        if (charSet === void 0) { charSet = \"utf8\"; }\n        if (offset === void 0) { offset = 0; }\n        if (length === void 0) { length = this.length; }\n        return this.buffer.toString(charSet, offset, length);\n    };\n    ByteArray.prototype.writeBoolean = function (value) {\n        this.writeByte(value ? 1 : 0);\n    };\n    ByteArray.prototype.writeByte = function (value) {\n        if (!this.canWrite(1)) {\n            this.scaleBuffer(1);\n        }\n        this.buffer.writeInt8(value, this.writePosition);\n        this.writePosition += 1;\n    };\n    ByteArray.prototype.writeBytes = function (buffer, offset, length) {\n        if (offset === void 0) { offset = 0; }\n        if (length === void 0) { length = 0; }\n        if (offset < 0 || length < 0) {\n            throw new Error(\"Offset/Length can't be less than 0\");\n        }\n        if (offset > buffer.length) {\n            offset = buffer.length;\n        }\n        if (length === 0) {\n            length = buffer.length - offset;\n        }\n        if (length > buffer.length - offset) {\n            throw new RangeError(\"Length can't be greater than the buffer length\");\n        }\n        if (length > 0) {\n            for (var i = offset; i < length; i++) {\n                this.writeByte(buffer[i]);\n            }\n        }\n    };\n    ByteArray.prototype.writeDouble = function (value) {\n        if (!this.canWrite(8)) {\n            this.scaleBuffer(8);\n        }\n        this.endian\n            ? this.buffer.writeDoubleBE(value, this.writePosition)\n            : this.buffer.writeDoubleLE(value, this.writePosition);\n        this.writePosition += 8;\n    };\n    ByteArray.prototype.writeFloat = function (value) {\n        if (!this.canWrite(4)) {\n            this.scaleBuffer(4);\n        }\n        this.endian\n            ? this.buffer.writeFloatBE(value, this.writePosition)\n            : this.buffer.writeFloatLE(value, this.writePosition);\n        this.writePosition += 4;\n    };\n    ByteArray.prototype.writeInt = function (value) {\n        if (!this.canWrite(4)) {\n            this.scaleBuffer(4);\n        }\n        this.endian\n            ? this.buffer.writeInt32BE(value, this.writePosition)\n            : this.buffer.writeInt32LE(value, this.writePosition);\n        this.writePosition += 4;\n    };\n    ByteArray.prototype.writeMultiByte = function (value, charSet) {\n        if (charSet === void 0) { charSet = \"utf8\"; }\n        var length = Buffer.byteLength(value);\n        if (!this.canWrite(length)) {\n            this.scaleBuffer(length);\n        }\n        if (Buffer.isEncoding(charSet)) {\n            this.buffer.write(value, this.writePosition, length, charSet);\n            this.writePosition += length;\n        }\n    };\n    ByteArray.prototype.writeShort = function (value) {\n        if (!this.canWrite(2)) {\n            this.scaleBuffer(2);\n        }\n        this.endian\n            ? this.buffer.writeInt16BE(value, this.writePosition)\n            : this.buffer.writeInt16LE(value, this.writePosition);\n        this.writePosition += 2;\n    };\n    ByteArray.prototype.writeUnsignedByte = function (value) {\n        if (!this.canWrite(1)) {\n            this.scaleBuffer(1);\n        }\n        this.buffer.writeUInt8(value, this.writePosition);\n        this.writePosition += 1;\n    };\n    ByteArray.prototype.writeUnsignedInt = function (value) {\n        if (!this.canWrite(4)) {\n            this.scaleBuffer(4);\n        }\n        this.endian\n            ? this.buffer.writeUInt32BE(value, this.writePosition)\n            : this.buffer.writeUInt32LE(value, this.writePosition);\n        this.writePosition += 4;\n    };\n    ByteArray.prototype.writeUnsignedShort = function (value) {\n        if (!this.canWrite(2)) {\n            this.scaleBuffer(2);\n        }\n        this.endian\n            ? this.buffer.writeUInt16BE(value, this.writePosition)\n            : this.buffer.writeUInt16LE(value, this.writePosition);\n        this.writePosition += 2;\n    };\n    ByteArray.prototype.writeUTF = function (value) {\n        var length = Buffer.byteLength(value);\n        if (length > 65535) {\n            throw new RangeError(\"Length can't be greater than 65535\");\n        }\n        if (!this.canWrite(length)) {\n            this.scaleBuffer(length);\n        }\n        this.writeUnsignedShort(length);\n        this.buffer.write(value, this.writePosition, length);\n        this.writePosition += length;\n    };\n    ByteArray.prototype.writeUTFBytes = function (value) {\n        this.writeMultiByte(value);\n    };\n    ByteArray.prototype.copyBytes = function (buffer, offset, length) {\n        if (offset === void 0) { offset = 0; }\n        if (length === void 0) { length = 0; }\n        if (offset < 0 || length < 0) {\n            throw new Error(\"Offset/Length can't be less than 0\");\n        }\n        if (offset > buffer.length) {\n            offset = buffer.length;\n        }\n        if (length === 0) {\n            length = buffer.length - offset;\n        }\n        if (length > buffer.length - offset) {\n            throw new RangeError(\"Length can't be greater than the buffer length\");\n        }\n        if (length > 0) {\n            for (var i = offset; i < length; i++) {\n                this.writeUnsignedByte(buffer[i]);\n            }\n        }\n    };\n    ByteArray.prototype.advanceReadPositionBy = function (value) {\n        this.readPosition += value;\n    };\n    return ByteArray;\n}());\nexports.default = ByteArray;\n//# sourceMappingURL=ByteArray.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n"]}